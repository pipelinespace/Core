// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PipelineSpace.Infra.Data.SqlServer.Contexts;

namespace PipelineSpace.Infra.Data.SqlServer.Migrations
{
    [DbContext(typeof(PipelineSpaceDbContext))]
    [Migration("20190812030822_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PipelineSpace.Domain.Models.Organization", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<int>("Status");

                    b.Property<string>("WebSiteUrl");

                    b.HasKey("OrganizationId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.OrganizationCMS", b =>
                {
                    b.Property<Guid>("OrganizationCMSId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessId")
                        .IsRequired();

                    b.Property<string>("AccessSecret");

                    b.Property<string>("AccessToken")
                        .IsRequired();

                    b.Property<string>("AccountId")
                        .IsRequired();

                    b.Property<string>("AccountName")
                        .IsRequired();

                    b.Property<int>("ConnectionType");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<Guid>("OrganizationId");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("OrganizationCMSId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationCMS");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.OrganizationCPS", b =>
                {
                    b.Property<Guid>("OrganizationCPSId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessAppId");

                    b.Property<string>("AccessAppSecret");

                    b.Property<string>("AccessDirectory");

                    b.Property<string>("AccessId")
                        .IsRequired();

                    b.Property<string>("AccessName");

                    b.Property<string>("AccessRegion")
                        .IsRequired();

                    b.Property<string>("AccessSecret");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<Guid>("OrganizationId");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("OrganizationCPSId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("OrganizationCPS");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.OrganizationProjectServiceTemplate", b =>
                {
                    b.Property<Guid>("OrganizationProjectServiceTemplateId");

                    b.Property<Guid>("OrganizationId");

                    b.Property<Guid>("ProjectServiceTemplateId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int>("Status");

                    b.HasKey("OrganizationProjectServiceTemplateId", "OrganizationId", "ProjectServiceTemplateId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ProjectServiceTemplateId");

                    b.ToTable("OrganizationProjectServiceTemplate");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.OrganizationUser", b =>
                {
                    b.Property<Guid>("OrganizationUserId");

                    b.Property<Guid>("OrganizationId");

                    b.Property<string>("UserId")
                        .HasMaxLength(450);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int>("Role");

                    b.Property<int>("Status");

                    b.HasKey("OrganizationUserId", "OrganizationId", "UserId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("OrganizationUser");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.OrganizationUserInvitation", b =>
                {
                    b.Property<Guid>("OrganizationUserInvitationId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AcceptedDate");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<int>("InvitationStatus");

                    b.Property<int>("InvitationType");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("OrganizationId");

                    b.Property<int>("Role");

                    b.Property<int>("Status");

                    b.Property<string>("UserEmail");

                    b.Property<string>("UserId")
                        .HasMaxLength(450);

                    b.HasKey("OrganizationUserInvitationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("OrganizationUserInvitation");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProgrammingLanguage", b =>
                {
                    b.Property<Guid>("ProgrammingLanguageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.HasKey("ProgrammingLanguageId");

                    b.ToTable("ProgrammingLanguage");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgentPoolId")
                        .IsRequired();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<string>("InternalName");

                    b.Property<bool>("IsImported");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("OrganizationCMSId");

                    b.Property<Guid?>("OrganizationCPSId");

                    b.Property<string>("OrganizationExternalId");

                    b.Property<Guid>("OrganizationId");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("ProjectExternalEndpointId");

                    b.Property<string>("ProjectExternalGitEndpoint");

                    b.Property<string>("ProjectExternalId");

                    b.Property<string>("ProjectExternalName");

                    b.Property<Guid?>("ProjectTemplateId");

                    b.Property<int>("ProjectType");

                    b.Property<string>("ProjectVSTSFakeId");

                    b.Property<string>("ProjectVSTSFakeName");

                    b.Property<int>("ProjectVisibility");

                    b.Property<int>("Status");

                    b.HasKey("ProjectId");

                    b.HasIndex("OrganizationCMSId");

                    b.HasIndex("OrganizationCPSId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProjectTemplateId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectActivity", b =>
                {
                    b.Property<Guid>("ProjectActivityId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActivityStatus");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("Log")
                        .IsRequired();

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("ProjectId");

                    b.Property<int>("Status");

                    b.HasKey("ProjectActivityId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectActivity");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectEnvironment", b =>
                {
                    b.Property<Guid>("ProjectEnvironmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AutoProvision");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("ProjectId");

                    b.Property<int>("Rank");

                    b.Property<bool>("RequiresApproval");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("ProjectEnvironmentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectEnvironment");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectEnvironmentVariable", b =>
                {
                    b.Property<Guid>("ProjectEnvironmentId");

                    b.Property<string>("Name");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int>("Status");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("ProjectEnvironmentId", "Name");

                    b.ToTable("ProjectEnvironmentVariable");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectFeature", b =>
                {
                    b.Property<Guid>("ProjectFeatureId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CompletionDate");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("ProjectId");

                    b.Property<int>("Status");

                    b.HasKey("ProjectFeatureId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectFeature");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectFeatureEnvironment", b =>
                {
                    b.Property<Guid>("ProjectFeatureEnvironmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("ProjectFeatureId");

                    b.Property<int>("Rank");

                    b.Property<bool>("RequiresApproval");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.HasKey("ProjectFeatureEnvironmentId");

                    b.HasIndex("ProjectFeatureId");

                    b.ToTable("ProjectFeatureEnvironment");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectFeatureEnvironmentVariable", b =>
                {
                    b.Property<Guid>("ProjectFeatureEnvironmentId");

                    b.Property<string>("Name");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int>("Status");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("ProjectFeatureEnvironmentId", "Name");

                    b.ToTable("ProjectFeatureEnvironmentVariable");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectFeatureService", b =>
                {
                    b.Property<Guid>("ProjectFeatureServiceId");

                    b.Property<Guid>("ProjectFeatureId");

                    b.Property<Guid>("ProjectServiceId");

                    b.Property<Guid?>("CodeServiceHookId");

                    b.Property<Guid?>("CommitServiceHookId");

                    b.Property<int?>("CommitStageId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime>("LasReleaseEventDate");

                    b.Property<DateTime>("LastBuildEventDate");

                    b.Property<string>("LastBuildSuccessVersionId");

                    b.Property<string>("LastBuildSuccessVersionName");

                    b.Property<string>("LastBuildVersionId");

                    b.Property<string>("LastBuildVersionName");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<int>("LastPipelineBuildStatus");

                    b.Property<int>("LastPipelineReleaseStatus");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int>("PipelineStatus");

                    b.Property<Guid?>("ReleaseCompletedApprovalServiceHookId");

                    b.Property<Guid?>("ReleasePendingApprovalServiceHookId");

                    b.Property<Guid?>("ReleaseServiceHookId");

                    b.Property<int?>("ReleaseStageId");

                    b.Property<Guid?>("ReleaseStartedServiceHookId");

                    b.Property<int>("Status");

                    b.HasKey("ProjectFeatureServiceId", "ProjectFeatureId", "ProjectServiceId");

                    b.HasIndex("ProjectFeatureId");

                    b.HasIndex("ProjectServiceId");

                    b.ToTable("ProjectFeatureService");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectFeatureServiceActivity", b =>
                {
                    b.Property<Guid>("ProjectFeatureServiceActivityId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActivityStatus");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("Log")
                        .IsRequired();

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("ProjectFeatureId");

                    b.Property<Guid?>("ProjectFeatureServiceId");

                    b.Property<Guid?>("ProjectFeatureServiceProjectFeatureId");

                    b.Property<Guid?>("ProjectFeatureServiceProjectServiceId");

                    b.Property<Guid>("ProjectId");

                    b.Property<Guid>("ProjectServiceId");

                    b.Property<int>("Status");

                    b.HasKey("ProjectFeatureServiceActivityId");

                    b.HasIndex("ProjectFeatureServiceId", "ProjectFeatureServiceProjectFeatureId", "ProjectFeatureServiceProjectServiceId");

                    b.ToTable("ProjectFeatureServiceActivity");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectFeatureServiceDelivery", b =>
                {
                    b.Property<Guid>("ProjectFeatureServiceDeliveryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Data");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<DateTime>("DeliveryDate");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("ProjectFeatureServiceId");

                    b.Property<Guid?>("ProjectFeatureServiceId1");

                    b.Property<Guid?>("ProjectFeatureServiceProjectFeatureId");

                    b.Property<Guid?>("ProjectFeatureServiceProjectServiceId");

                    b.Property<int>("Status");

                    b.Property<int>("VersionId");

                    b.Property<string>("VersionName")
                        .IsRequired();

                    b.HasKey("ProjectFeatureServiceDeliveryId");

                    b.HasIndex("ProjectFeatureServiceId1", "ProjectFeatureServiceProjectFeatureId", "ProjectFeatureServiceProjectServiceId");

                    b.ToTable("ProjectFeatureServiceDelivery");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectFeatureServiceEnvironment", b =>
                {
                    b.Property<Guid>("ProjectFeatureServiceEnvironmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<string>("LastApprovalId");

                    b.Property<DateTime>("LastEventDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("LastStatus");

                    b.Property<string>("LastStatusCode");

                    b.Property<string>("LastSuccessVersionId");

                    b.Property<string>("LastSuccessVersionName");

                    b.Property<string>("LastVersionId");

                    b.Property<string>("LastVersionName");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("ProjectFeatureEnvironmentId");

                    b.Property<Guid?>("ProjectFeatureServiceId");

                    b.Property<Guid?>("ProjectFeatureServiceProjectFeatureId");

                    b.Property<Guid?>("ProjectFeatureServiceProjectServiceId");

                    b.Property<int>("Status");

                    b.HasKey("ProjectFeatureServiceEnvironmentId");

                    b.HasIndex("ProjectFeatureEnvironmentId");

                    b.HasIndex("ProjectFeatureServiceId", "ProjectFeatureServiceProjectFeatureId", "ProjectFeatureServiceProjectServiceId");

                    b.ToTable("ProjectFeatureServiceEnvironment");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectFeatureServiceEnvironmentVariable", b =>
                {
                    b.Property<Guid>("ProjectFeatureServiceEnvironmentId");

                    b.Property<string>("Name");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int>("Status");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("ProjectFeatureServiceEnvironmentId", "Name");

                    b.ToTable("ProjectFeatureServiceEnvironmentVariable");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectFeatureServiceEvent", b =>
                {
                    b.Property<Guid>("ProjectFeatureServiceEventId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BaseEventType");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<DateTime>("EventDate");

                    b.Property<string>("EventDescription")
                        .IsRequired();

                    b.Property<string>("EventDetailedMessage")
                        .IsRequired();

                    b.Property<string>("EventMessage")
                        .IsRequired();

                    b.Property<string>("EventResource")
                        .IsRequired();

                    b.Property<string>("EventStatus")
                        .IsRequired();

                    b.Property<string>("EventType")
                        .IsRequired();

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("ProjectFeatureServiceId");

                    b.Property<Guid?>("ProjectFeatureServiceId1");

                    b.Property<Guid?>("ProjectFeatureServiceProjectFeatureId");

                    b.Property<Guid?>("ProjectFeatureServiceProjectServiceId");

                    b.Property<int>("Status");

                    b.HasKey("ProjectFeatureServiceEventId");

                    b.HasIndex("ProjectFeatureServiceId1", "ProjectFeatureServiceProjectFeatureId", "ProjectFeatureServiceProjectServiceId");

                    b.ToTable("ProjectFeatureServiceEvent");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectService", b =>
                {
                    b.Property<Guid>("ProjectServiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgentPoolId")
                        .IsRequired();

                    b.Property<string>("BranchName");

                    b.Property<Guid?>("CodeServiceHookId");

                    b.Property<Guid?>("CommitServiceHookId");

                    b.Property<int?>("CommitStageId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<string>("InternalName");

                    b.Property<bool>("IsImported");

                    b.Property<DateTime>("LasReleaseEventDate");

                    b.Property<DateTime>("LastBuildEventDate");

                    b.Property<string>("LastBuildSuccessVersionId");

                    b.Property<string>("LastBuildSuccessVersionName");

                    b.Property<string>("LastBuildVersionId");

                    b.Property<string>("LastBuildVersionName");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<int>("LastPipelineBuildStatus");

                    b.Property<int>("LastPipelineReleaseStatus");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid?>("OrganizationCMSId");

                    b.Property<int>("PipeType");

                    b.Property<int>("PipelineStatus");

                    b.Property<string>("ProjectBranchServiceExternalUrl");

                    b.Property<string>("ProjectExternalId");

                    b.Property<string>("ProjectExternalName");

                    b.Property<Guid>("ProjectId");

                    b.Property<string>("ProjectServiceExternalId");

                    b.Property<string>("ProjectServiceExternalName");

                    b.Property<string>("ProjectServiceExternalUrl");

                    b.Property<Guid>("ProjectServiceTemplateId");

                    b.Property<Guid?>("ReleaseCompletedApprovalServiceHookId");

                    b.Property<Guid?>("ReleasePendingApprovalServiceHookId");

                    b.Property<Guid?>("ReleaseServiceHookId");

                    b.Property<int?>("ReleaseStageId");

                    b.Property<Guid?>("ReleaseStartedServiceHookId");

                    b.Property<int>("Status");

                    b.HasKey("ProjectServiceId");

                    b.HasIndex("OrganizationCMSId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectServiceTemplateId");

                    b.ToTable("ProjectService");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectServiceActivity", b =>
                {
                    b.Property<Guid>("ProjectServiceActivityId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActivityStatus");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("Log")
                        .IsRequired();

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("ProjectId");

                    b.Property<Guid>("ProjectServiceId");

                    b.Property<int>("Status");

                    b.HasKey("ProjectServiceActivityId");

                    b.HasIndex("ProjectServiceId");

                    b.ToTable("ProjectServiceActivity");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectServiceDelivery", b =>
                {
                    b.Property<Guid>("ProjectServiceDeliveryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Data");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<DateTime>("DeliveryDate");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("ProjectServiceId");

                    b.Property<int>("Status");

                    b.Property<int>("VersionId");

                    b.Property<string>("VersionName")
                        .IsRequired();

                    b.HasKey("ProjectServiceDeliveryId");

                    b.HasIndex("ProjectServiceId");

                    b.ToTable("ProjectServiceDelivery");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectServiceEnvironment", b =>
                {
                    b.Property<Guid>("ProjectServiceEnvironmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<string>("LastApprovalId");

                    b.Property<DateTime>("LastEventDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("LastStatus");

                    b.Property<string>("LastStatusCode");

                    b.Property<string>("LastSuccessVersionId");

                    b.Property<string>("LastSuccessVersionName");

                    b.Property<string>("LastVersionId");

                    b.Property<string>("LastVersionName");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("ProjectEnvironmentId");

                    b.Property<Guid?>("ProjectServiceId");

                    b.Property<int>("Status");

                    b.HasKey("ProjectServiceEnvironmentId");

                    b.HasIndex("ProjectEnvironmentId");

                    b.HasIndex("ProjectServiceId");

                    b.ToTable("ProjectServiceEnvironment");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectServiceEnvironmentVariable", b =>
                {
                    b.Property<Guid>("ProjectServiceEnvironmentId");

                    b.Property<string>("Name");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int>("Status");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.HasKey("ProjectServiceEnvironmentId", "Name");

                    b.ToTable("ProjectServiceEnvironmentVariable");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectServiceEvent", b =>
                {
                    b.Property<Guid>("ProjectServiceEventId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BaseEventType");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<DateTime>("EventDate");

                    b.Property<string>("EventDescription")
                        .IsRequired();

                    b.Property<string>("EventDetailedMessage")
                        .IsRequired();

                    b.Property<string>("EventMessage")
                        .IsRequired();

                    b.Property<string>("EventResource")
                        .IsRequired();

                    b.Property<string>("EventStatus")
                        .IsRequired();

                    b.Property<string>("EventType")
                        .IsRequired();

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("ProjectServiceId");

                    b.Property<int>("Status");

                    b.HasKey("ProjectServiceEventId");

                    b.HasIndex("ProjectServiceId");

                    b.ToTable("ProjectServiceEvent");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectServiceTemplate", b =>
                {
                    b.Property<Guid>("ProjectServiceTemplateId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Framework")
                        .IsRequired();

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("Logo")
                        .IsRequired();

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("NeedCredentials");

                    b.Property<string>("Path");

                    b.Property<int>("PipeType");

                    b.Property<Guid>("ProgrammingLanguageId");

                    b.Property<int>("ServiceCMSType");

                    b.Property<int>("ServiceCPSType");

                    b.Property<int>("Status");

                    b.Property<int>("TemplateAccess");

                    b.Property<int>("TemplateType");

                    b.Property<string>("Url")
                        .IsRequired();

                    b.HasKey("ProjectServiceTemplateId");

                    b.HasIndex("ProgrammingLanguageId");

                    b.ToTable("ProjectServiceTemplate");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectServiceTemplateCredential", b =>
                {
                    b.Property<Guid>("ProjectServiceTemplateId");

                    b.Property<string>("AccessId");

                    b.Property<string>("AccessSecret");

                    b.Property<string>("AccessToken");

                    b.Property<int>("CMSType");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int>("Status");

                    b.HasKey("ProjectServiceTemplateId");

                    b.ToTable("ProjectServiceTemplateCredential");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectServiceTemplateParameter", b =>
                {
                    b.Property<Guid>("ProjectServiceTemplateParameterId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("ProjectServiceTemplateId");

                    b.Property<string>("Scope")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.Property<string>("Value")
                        .IsRequired();

                    b.Property<string>("VariableName")
                        .IsRequired();

                    b.HasKey("ProjectServiceTemplateParameterId");

                    b.HasIndex("ProjectServiceTemplateId");

                    b.ToTable("ProjectServiceTemplateParameter");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectTemplate", b =>
                {
                    b.Property<Guid>("ProjectTemplateId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CloudProviderType");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("Logo")
                        .IsRequired();

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Status");

                    b.HasKey("ProjectTemplateId");

                    b.ToTable("ProjectTemplate");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectTemplateService", b =>
                {
                    b.Property<Guid>("ProjectTemplateId");

                    b.Property<Guid>("ProjectServiceTemplateId");

                    b.Property<string>("Name");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int>("Status");

                    b.HasKey("ProjectTemplateId", "ProjectServiceTemplateId", "Name");

                    b.HasIndex("ProjectServiceTemplateId");

                    b.ToTable("ProjectTemplateService");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectUser", b =>
                {
                    b.Property<Guid>("ProjectUserId");

                    b.Property<Guid>("ProjectId");

                    b.Property<string>("UserId")
                        .HasMaxLength(450);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int>("Role");

                    b.Property<int>("Status");

                    b.HasKey("ProjectUserId", "ProjectId", "UserId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUser");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectUserInvitation", b =>
                {
                    b.Property<Guid>("ProjectUserInvitationId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("AcceptedDate");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<int>("InvitationStatus");

                    b.Property<int>("InvitationType");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<Guid>("ProjectId");

                    b.Property<int>("Role");

                    b.Property<int>("Status");

                    b.Property<string>("UserEmail");

                    b.Property<string>("UserId")
                        .HasMaxLength(450);

                    b.HasKey("ProjectUserInvitationId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUserInvitation");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("DeletionDate");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("InactivatedBy")
                        .HasMaxLength(450);

                    b.Property<DateTime?>("InactivationDate");

                    b.Property<DateTime?>("LastModificationDate");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(450);

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.Organization", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.User", "Owner")
                        .WithMany("Organizations")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.OrganizationCMS", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.Organization", "Organization")
                        .WithMany("ConfigurationManagementServices")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.OrganizationCPS", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.Organization", "Organization")
                        .WithMany("CloudProviderServices")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.OrganizationProjectServiceTemplate", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.Organization", "Organization")
                        .WithMany("ProjectServiceTemplates")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PipelineSpace.Domain.Models.ProjectServiceTemplate", "ProjectServiceTemplate")
                        .WithMany("Organizations")
                        .HasForeignKey("ProjectServiceTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.OrganizationUser", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PipelineSpace.Domain.Models.User", "User")
                        .WithMany("OrganizationUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.OrganizationUserInvitation", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.Organization", "Organization")
                        .WithMany("UserInvitations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PipelineSpace.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.Project", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.OrganizationCMS", "OrganizationCMS")
                        .WithMany("Projects")
                        .HasForeignKey("OrganizationCMSId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PipelineSpace.Domain.Models.OrganizationCPS", "OrganizationCPS")
                        .WithMany("Projects")
                        .HasForeignKey("OrganizationCPSId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PipelineSpace.Domain.Models.Organization", "Organization")
                        .WithMany("Projects")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PipelineSpace.Domain.Models.User", "Owner")
                        .WithMany("Projects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PipelineSpace.Domain.Models.ProjectTemplate", "ProjectTemplate")
                        .WithMany()
                        .HasForeignKey("ProjectTemplateId");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectActivity", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.Project")
                        .WithMany("Activities")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectEnvironment", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.Project", "Project")
                        .WithMany("Environments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectEnvironmentVariable", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.ProjectEnvironment", "ProjectEnvironment")
                        .WithMany("Variables")
                        .HasForeignKey("ProjectEnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectFeature", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.Project", "Project")
                        .WithMany("Features")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectFeatureEnvironment", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.ProjectFeature", "ProjectFeature")
                        .WithMany("Environments")
                        .HasForeignKey("ProjectFeatureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectFeatureEnvironmentVariable", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.ProjectFeatureEnvironment", "ProjectFeatureEnvironment")
                        .WithMany("Variables")
                        .HasForeignKey("ProjectFeatureEnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectFeatureService", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.ProjectFeature", "ProjectFeature")
                        .WithMany("Services")
                        .HasForeignKey("ProjectFeatureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PipelineSpace.Domain.Models.ProjectService", "ProjectService")
                        .WithMany("Features")
                        .HasForeignKey("ProjectServiceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectFeatureServiceActivity", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.ProjectFeatureService")
                        .WithMany("Activities")
                        .HasForeignKey("ProjectFeatureServiceId", "ProjectFeatureServiceProjectFeatureId", "ProjectFeatureServiceProjectServiceId");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectFeatureServiceDelivery", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.ProjectFeatureService", "ProjectFeatureService")
                        .WithMany("Deliveries")
                        .HasForeignKey("ProjectFeatureServiceId1", "ProjectFeatureServiceProjectFeatureId", "ProjectFeatureServiceProjectServiceId");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectFeatureServiceEnvironment", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.ProjectFeatureEnvironment", "ProjectFeatureEnvironment")
                        .WithMany()
                        .HasForeignKey("ProjectFeatureEnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PipelineSpace.Domain.Models.ProjectFeatureService")
                        .WithMany("Environments")
                        .HasForeignKey("ProjectFeatureServiceId", "ProjectFeatureServiceProjectFeatureId", "ProjectFeatureServiceProjectServiceId");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectFeatureServiceEnvironmentVariable", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.ProjectFeatureServiceEnvironment", "ProjectFeatureServiceEnvironment")
                        .WithMany("Variables")
                        .HasForeignKey("ProjectFeatureServiceEnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectFeatureServiceEvent", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.ProjectFeatureService", "ProjectFeatureService")
                        .WithMany("Events")
                        .HasForeignKey("ProjectFeatureServiceId1", "ProjectFeatureServiceProjectFeatureId", "ProjectFeatureServiceProjectServiceId");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectService", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.OrganizationCMS", "OrganizationCMS")
                        .WithMany("Services")
                        .HasForeignKey("OrganizationCMSId");

                    b.HasOne("PipelineSpace.Domain.Models.Project", "Project")
                        .WithMany("Services")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PipelineSpace.Domain.Models.ProjectServiceTemplate", "ProjectServiceTemplate")
                        .WithMany("ProjectServices")
                        .HasForeignKey("ProjectServiceTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectServiceActivity", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.ProjectService")
                        .WithMany("Activities")
                        .HasForeignKey("ProjectServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectServiceDelivery", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.ProjectService", "ProjectService")
                        .WithMany("Deliveries")
                        .HasForeignKey("ProjectServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectServiceEnvironment", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.ProjectEnvironment", "ProjectEnvironment")
                        .WithMany()
                        .HasForeignKey("ProjectEnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PipelineSpace.Domain.Models.ProjectService")
                        .WithMany("Environments")
                        .HasForeignKey("ProjectServiceId");
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectServiceEnvironmentVariable", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.ProjectServiceEnvironment", "ProjectServiceEnvironment")
                        .WithMany("Variables")
                        .HasForeignKey("ProjectServiceEnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectServiceEvent", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.ProjectService", "ProjectService")
                        .WithMany("Events")
                        .HasForeignKey("ProjectServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectServiceTemplate", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.ProgrammingLanguage", "ProgrammingLanguage")
                        .WithMany()
                        .HasForeignKey("ProgrammingLanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectServiceTemplateCredential", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.ProjectServiceTemplate")
                        .WithOne("Credential")
                        .HasForeignKey("PipelineSpace.Domain.Models.ProjectServiceTemplateCredential", "ProjectServiceTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectServiceTemplateParameter", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.ProjectServiceTemplate", "ProjectServiceTemplate")
                        .WithMany("Parameters")
                        .HasForeignKey("ProjectServiceTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectTemplateService", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.ProjectServiceTemplate", "ProjectServiceTemplate")
                        .WithMany("ProjectTemplateServices")
                        .HasForeignKey("ProjectServiceTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PipelineSpace.Domain.Models.ProjectTemplate", "ProjectTemplate")
                        .WithMany("Services")
                        .HasForeignKey("ProjectTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectUser", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.Project", "Project")
                        .WithMany("Users")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PipelineSpace.Domain.Models.User", "User")
                        .WithMany("ProjectUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PipelineSpace.Domain.Models.ProjectUserInvitation", b =>
                {
                    b.HasOne("PipelineSpace.Domain.Models.Project", "Project")
                        .WithMany("UserInvitations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PipelineSpace.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
